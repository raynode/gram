// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing the example 1 should build the example code 1`] = `
"input CreateUserData {
  email: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

scalar DateTime

interface List {
  page: Page
  nodes: [Node!]!
}

interface Node {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Query {
  buildMode: String
  me: User
}

input UpdateUserData {
  email: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type User implements Node {
  email: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

input UserPage {
  limit: Int
  offset: Int
}

type Users implements List {
  page: Page
  nodes: [User!]!
}

enum UserSortOrder {
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

input UserWhere {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}
"
`;

exports[`testing the example 1 should build the example code 2`] = `
"input CreateUserData {
  email: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

scalar DateTime

interface List {
  page: Page
  nodes: [Node!]!
}

interface Node {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Query {
  buildMode: String
  me: User
}

input UpdateUserData {
  email: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type User implements Node {
  email: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

input UserPage {
  limit: Int
  offset: Int
}

type Users implements List {
  page: Page
  nodes: [User!]!
}

enum UserSortOrder {
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

input UserWhere {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}
"
`;
