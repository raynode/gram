// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing the example 1 should build the example code 1`] = `
"type Animal implements Node {
  type: String!
  name: String
  tame: Boolean
  age: Int
}

input AnimalFilter {
  AND: [AnimalFilter!]
  OR: [AnimalFilter!]
  NOT: AnimalFilter
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  tame: Boolean
  tame_not: Boolean
  age: Int
  age_not: Int
  age_lt: Int
  age_gt: Int
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

input AnimalPage {
  limit: Int
  offset: Int
}

type Animals implements List {
  page: Page
  nodes: [Animal!]!
}

enum AnimalSortOrder {
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  tame_ASC
  tame_DESC
  age_ASC
  age_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

input AnimalWhere {
  AND: [AnimalFilter!]
  OR: [AnimalFilter!]
  NOT: AnimalFilter
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  tame: Boolean
  tame_not: Boolean
  age: Int
  age_not: Int
  age_lt: Int
  age_gt: Int
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

input CreateAnimalData {
  type: String!
  name: String
  tame: Boolean
  age: Int
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CreateListData {
  page: PageWhere
  nodes: NodeWhere
}

input CreateNodeData {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CreatePageData {
  page: Int
  limit: Int
  offset: Int
}

scalar DateTime

interface List {
  page: Page
  nodes: [Node!]!
}

input ListFilter {
  AND: [ListFilter!]
  OR: [ListFilter!]
  NOT: ListFilter
}

input ListPage {
  limit: Int
  offset: Int
}

enum ListSortOrder {
  page_ASC
  page_DESC
  nodes_ASC
  nodes_DESC
}

input ListWhere {
  AND: [ListFilter!]
  OR: [ListFilter!]
  NOT: ListFilter
}

type Mutation {
  createAnimal(data: CreateAnimalData!): Animal
  updateAnimal(data: UpdateAnimalData!, where: AnimalWhere!): [Animal!]!
  deleteAnimals(where: AnimalWhere!): [Animal!]!
}

interface Node {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input NodeFilter {
  AND: [NodeFilter!]
  OR: [NodeFilter!]
  NOT: NodeFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

input NodePage {
  limit: Int
  offset: Int
}

enum NodeSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

input NodeWhere {
  AND: [NodeFilter!]
  OR: [NodeFilter!]
  NOT: NodeFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

input PageFilter {
  AND: [PageFilter!]
  OR: [PageFilter!]
  NOT: PageFilter
  page: Int
  page_not: Int
  page_lt: Int
  page_gt: Int
  limit: Int
  limit_not: Int
  limit_lt: Int
  limit_gt: Int
  offset: Int
  offset_not: Int
  offset_lt: Int
  offset_gt: Int
}

input PagePage {
  limit: Int
  offset: Int
}

type Pages implements List {
  page: Page
  nodes: [Page!]!
}

enum PageSortOrder {
  page_ASC
  page_DESC
  limit_ASC
  limit_DESC
  offset_ASC
  offset_DESC
}

input PageWhere {
  AND: [PageFilter!]
  OR: [PageFilter!]
  NOT: PageFilter
  page: Int
  page_not: Int
  page_lt: Int
  page_gt: Int
  limit: Int
  limit_not: Int
  limit_lt: Int
  limit_gt: Int
  offset: Int
  offset_not: Int
  offset_lt: Int
  offset_gt: Int
}

type Query {
  getAnimal(where: AnimalWhere!, order: AnimalSortOrder): Animal
  getAnimals(order: AnimalSortOrder, page: AnimalPage, where: AnimalWhere!): Animals
}

type Subscription {
  onCreateAnimal: Animal!
  onUpdateAnimal: [Animal!]!
  onDeleteAnimals: [Animal!]!
}

input UpdateAnimalData {
  type: String!
  name: String
  tame: Boolean
  age: Int
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UpdateListData {
  page: PageWhere
  nodes: NodeWhere
}

input UpdateNodeData {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UpdatePageData {
  page: Int
  limit: Int
  offset: Int
}
"
`;
